@page "/simulador"
@page "/"
@inject IJSRuntime JS
@using Simulador_Assembly_Final.Classes
@using System.Globalization

<h3 class="titulo">Simulador de Assembly</h3>

<div class="form-container" style="@((mostrarParametrosAvancados ? "max-width: 600px;" : "max-width: 400px;"))">
    <div class="form-group">
        <label for="filePath">Caminho do Arquivo</label>
        <input id="filePath" @bind="simuladorObj.FilePath" placeholder="Ex: C:\código\teste.asm" />
    </div>

    <div class="form-group">
        <label class="switch-label">
            <span>Exibir parâmetros avançados</span>
            <label class="switch">
                <input type="checkbox" @bind="mostrarParametrosAvancados" />
                <span class="slider round"></span>
            </label>
        </label>
    </div>


    @if (mostrarParametrosAvancados)
    {
        <div class="form-group">
            <label for="clockMHz">Clock (MHz)</label>
            <input id="clockMHz" type="number" @bind="simuladorObj.ClockMHz" />
        </div>

        <div class="form-group">
            <label for="ciclosR">Ciclos para instruções tipo R</label>
            <input id="ciclosR" type="number" @bind="simuladorObj.CyclesR" />
        </div>

        <div class="form-group">
            <label for="ciclosI">Ciclos para instruções tipo I</label>
            <input id="ciclosI" type="number" @bind="simuladorObj.CyclesI" />
        </div>

        <div class="form-group">
            <label for="ciclosJ">Ciclos para instruções tipo J</label>
            <input id="ciclosJ" type="number" @bind="simuladorObj.CyclesJ" />
        </div>
    }

    <button class="btn-primary" @onclick="ExecutarSimulacaoAsync">Executar Simulação</button>
</div>

@if (mostrarModal)
{
    <div style="position:fixed; inset:0; background-color:rgba(0,0,0,0.5); display:flex; justify-content:center; align-items:center; z-index:1000;">

        <div class="modal-container" style="background:#fff; padding:2rem; border-radius:10px; min-width:300px; box-shadow:0 0 10px #000;">

            <h4>Execução Clock a Clock</h4>

            <div class="painel-execucao">
                <div class="bloco">
                    <strong>Registradores</strong>
                    @foreach (var reg in simuladorObj.Registradores)
                    {
                        <div>@reg.Key: @reg.Value</div>
                    }
                </div>

                <div class="bloco">
                    <strong>Memória de Dados</strong>
                    @foreach (var item in memoria.MostrarEstadoMemoriaDados())
                    {
                        <div>@item</div>
                    }
                </div>
            </div>

            <div class="painel-execucao">
                <div class="bloco bloco-longo">
                    <strong>Memória de Programa</strong>
                    @foreach (var linha in memoriaInstrucao.ObterEstadoMemoriaDados(mostrarParametrosAvancados))
                    {
                        <div class="linha-execucao">@linha</div>
                    }
                </div>
            </div>

            <div class="painel-execucao">
                <div class="bloco">
                    <strong>Linha em execução</strong>
                    <div>
                        @memoriaInstrucao.ObterInstrucaoHexadecimal(LinhaAtualCompletaAssembly, LinhaAtualReferencia)
                    </div>
                </div>

                <div class="bloco">
                    <strong>Linha em execução (Assembly)</strong>
                    <div>
                        @LinhaAtualCompletaAssembly
                    </div>
                </div>
            </div>

            <div class="modal-buttons">
                @if (TemMaisInstrucoes && !ExecutandoDelay)
                {
                    <button class="btn-primary" @onclick="ExecutarClock">Clock++</button>
                }
                else if (TemMaisInstrucoes && ExecutandoDelay)
                {
                }
                else
                {
                    <div class="bloco" style="display: flex; flex-direction: column; justify-content: center; align-items: center; text-align: center;">
                        <strong>Resultados Finais</strong>
                        <div>
                            Total de Instruções: @TotalInstrucoes<br />
                            Total de Ciclos: @Totalizador.TotalCiclos<br />
                            Tempo Total Estimado de Execução: @simuladorObj.TempoTotalEstimado;
                            <br />
                        </div>
                    </div>
                    <div style="height: 1.5rem;"></div>
                }

                <button class="btn-secondary" @onclick="FecharModal">Fechar</button>
            </div>
        </div>
    </div>

}


@code {
    private bool mostrarParametrosAvancados = false;
    private Simulador simuladorObj { get; set; } = new();
    private MemoriaInstrucao memoriaInstrucao { get; set; } = new();
    private Memoria memoria { get; set; } = new();
    private Instrucoes instrucoes { get; set; } = new();
    private TabelaInstrucoes tabelaInstrucoes { get; set; } = new();
    private Dictionary<string, int> Labels = new();
    private Dictionary<string, int> Registradores = new();
    private List<string> MemoriaPrograma = new();
    private List<string> LinhasPrograma { get; set; } = new();

    private int ciclosRestantesInstrucao = 0;
    private int LinhaAtualReferencia { get; set; }
    private int TotalInstrucoes { get; set; }
    private int linhaAtual = 0;
    private bool mostrarModal = false;
    private bool TemMaisInstrucoes => linhaAtual < LinhasPrograma.Count || ciclosRestantesInstrucao > 0;
    private bool ExecutandoDelay = false;
    private string LinhaAtualCompletaAssembly { get; set; }
    private string resultadoSimulacao = string.Empty;

    private int ContadorIntrucoes = 0;
    private int qtdCiclosAnteriores = 0;

    private async Task ExecutarSimulacaoAsync()
    {
        if (string.IsNullOrWhiteSpace(simuladorObj.FilePath) || !File.Exists(simuladorObj.FilePath))
        {
            resultadoSimulacao = "Arquivo não encontrado.";
            return;
        }

        var linhas = File.ReadAllLines(simuladorObj.FilePath).ToList();

        if (!mostrarParametrosAvancados)
        {
            if (linhas.Count > 0 && linhas[0].StartsWith("Config_CPU"))
            {
                try
                {
                    var conteudo = linhas[0].Split('[', ']')[1];
                    var parametros = conteudo.Split(',').Select(p => p.Trim()).ToList();

                    // Clock com múltiplas unidades (kHz, MHz, GHz)
                    var clock = parametros[0].ToLowerInvariant();

                    double valorClock;

                    if (clock.EndsWith("ghz"))
                    {
                        valorClock = double.Parse(clock.Replace("ghz", ""), CultureInfo.InvariantCulture);
                        simuladorObj.ClockMHz = valorClock * 1000; // GHz para MHz
                    }
                    else if (clock.EndsWith("mhz"))
                    {
                        valorClock = double.Parse(clock.Replace("mhz", ""), CultureInfo.InvariantCulture);
                        simuladorObj.ClockMHz = valorClock; // já está em MHz
                    }
                    else if (clock.EndsWith("khz"))
                    {
                        valorClock = double.Parse(clock.Replace("khz", ""), CultureInfo.InvariantCulture);
                        simuladorObj.ClockMHz = valorClock / 1000; // kHz para MHz
                    }
                    else
                    {
                        resultadoSimulacao = "Unidade do clock inválida. Use 'kHz', 'MHz' ou 'GHz'.";
                        return;
                    }

                    // Ciclos
                    foreach (var item in parametros.Skip(1))
                    {
                        var partes = item.Split('=');
                        if (partes.Length == 2)
                        {
                            var tipo = partes[0].ToLowerInvariant();
                            if (!int.TryParse(partes[1], out int valor))
                            {
                                resultadoSimulacao = "Valor dos ciclos inválido.";
                                return;
                            }

                            switch (tipo)
                            {
                                case "r": simuladorObj.CyclesR = valor; break;
                                case "i": simuladorObj.CyclesI = valor; break;
                                case "j": simuladorObj.CyclesJ = valor; break;
                                default:
                                    resultadoSimulacao = $"Tipo de ciclo desconhecido: {tipo}";
                                    return;
                            }
                        }
                        else
                        {
                            resultadoSimulacao = "Formato inválido para parâmetros de ciclos.";
                            return;
                        }
                    }

                    linhas.RemoveAt(0); // remove linha de configuração
                }
                catch
                {
                    resultadoSimulacao = "Erro ao processar linha 'Config_CPU'. Verifique o formato.";
                    return;
                }
            }
            else
            {
                resultadoSimulacao = "Linha 'Config_CPU' ausente no início do arquivo.";
                return;
            }
        }

        // Aqui roda tanto para avançado (true) quanto para normal (false)
        if (simuladorObj.ClockMHz <= 0 || simuladorObj.CyclesR <= 0 || simuladorObj.CyclesI <= 0 || simuladorObj.CyclesJ <= 0)
        {
            resultadoSimulacao = "Verifique os valores de clock e ciclos. Todos devem ser maiores que zero.";
            return;
        }

        simuladorObj.TempoClockUnicoSegundos = await simuladorObj.ObterTempoMs(simuladorObj.ClockMHz);

        Registradores = TabelaInstrucoes.Registradores.CriarRegistradores();
        LinhasPrograma = linhas;

        MemoriaPrograma = linhas
            .Where(l => !string.IsNullOrWhiteSpace(l) && !l.Trim().StartsWith("#"))
            .ToList();

        Labels.Clear();
        for (int i = 0; i < LinhasPrograma.Count; i++)
        {
            var linha = LinhasPrograma[i].Trim();
            if (linha.EndsWith(":"))
            {
                string nomeLabel = linha.Substring(0, linha.Length - 1).Trim();
                Labels[nomeLabel] = i;
            }
        }

        instrucoes = new Instrucoes();
        linhaAtual = 0;
        mostrarModal = true;
        StateHasChanged();
    }


    private void FecharModal()
    {
        mostrarModal = false;
        linhaAtual = 0;
        resultadoSimulacao = string.Empty;
        simuladorObj = new();
        memoriaInstrucao = new();
        memoria = new();
        instrucoes = new();
        tabelaInstrucoes = new();
        Labels = new();
        Registradores = new();
        LinhasPrograma = new();
        MemoriaPrograma = new();
        ciclosRestantesInstrucao = 0;
        LinhaAtualCompletaAssembly = string.Empty;
        ContadorIntrucoes = 0;
        Totalizador.Reset();

        StateHasChanged();
    }


    private async Task ExecutarClock()
    {
        // Se ainda há ciclos pendentes da instrução atual
        if (ciclosRestantesInstrucao > 0)
        {
            ExecutandoDelay = true;
            await simuladorObj.AguardarTempo(simuladorObj.TempoClockUnicoSegundos);
            ciclosRestantesInstrucao--;
            ExecutandoDelay = false;

            // Só atualiza UI, sem avançar para próxima instrução
            StateHasChanged();
            return;
        }

        // Caso contrário, buscar nova instrução
        while (linhaAtual < LinhasPrograma.Count)
        {
            LinhaAtualCompletaAssembly = string.Empty;
            var linha = LinhasPrograma[linhaAtual].Split('#')[0].Trim();

            // Pula comentários ou labels
            if (string.IsNullOrWhiteSpace(linha) || linha.StartsWith("#") || linha.EndsWith(":"))
            {
                linhaAtual++;
                continue;
            }

            // Parse da instrução
            var (instrucao, operandos) = Instrucoes.ParseInstrucao(linha);
            if (string.IsNullOrEmpty(instrucao) || operandos == null)
            {
                resultadoSimulacao = $"Erro ao processar a linha: {linha}. A instrução não foi válida.";
                mostrarModal = false;
                return;
            }

            if (instrucoes == null)
                instrucoes = new Instrucoes();

            var ciclosInstrucoes = Instrucoes.ParseWordsToArray(
                simuladorObj.FilePath,
                simuladorObj.CyclesI,
                simuladorObj.CyclesJ,
                simuladorObj.CyclesR,
                simuladorObj.TempoClockUnicoSegundos,
                memoriaInstrucao
            );

            // Define ciclos restantes
            if (TabelaInstrucoes.Instrucoes.TryGetValue(instrucao, out var dicInstrucoes))
            {
                ciclosRestantesInstrucao = dicInstrucoes.Item2 - 1; // Já vai executar 1 ciclo agora
            }
            else
            {
                ciclosRestantesInstrucao = 0; // Se não encontrou, considera como 1 ciclo
            }

            if (!mostrarParametrosAvancados && ciclosInstrucoes.Count > 0)
            {
                var primeiraChave = ciclosInstrucoes.Keys.First();
                ciclosInstrucoes.Remove(primeiraChave);
            }


            // Executar a instrução
            instrucoes.Executar(instrucao, operandos, simuladorObj.Registradores, memoria, Labels, linhaAtual, ciclosInstrucoes, simuladorObj.TempoClockUnicoSegundos, memoriaInstrucao, simuladorObj, mostrarParametrosAvancados);
            TotalInstrucoes = ciclosInstrucoes.Count();
            LinhaAtualCompletaAssembly = linha;
            LinhaAtualReferencia = (linhaAtual * 4);
            if (instrucao.StartsWith("j"))
            {
                string label = operandos.FirstOrDefault();
                if (Labels.ContainsKey(label))
                    linhaAtual = Labels[label];
                else
                    resultadoSimulacao = $"Erro: Label {label} não encontrada.";
            }
            else if (instrucao.StartsWith("b"))
            {
                linhaAtual = simuladorObj.Registradores["PC"];
            }
            else
            {
                linhaAtual++;
            }
            // Executa primeiro ciclo agora
            ExecutandoDelay = true;
            await simuladorObj.AguardarTempo(simuladorObj.TempoClockUnicoSegundos);
            ExecutandoDelay = false;

            StateHasChanged();
            break; // Sai, aguardando o próximo clique
        }
    }
}
<style>
    body, html {
        font-family: 'Courier New', monospace;
        background-color: #0d1b21;
        color: #a7d4dd;
    }

    .form-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        background: #0e252f;
        border: 1px solid #1e7a87;
        border-radius: 12px;
        box-shadow: inset 0 0 12px #1e7a8733;
        transition: all 0.3s ease-in-out;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: #81f1ff;
        }

        .form-group input {
            width: 100%;
            padding: 0.6rem 1rem;
            border: 1px solid #1e7a87;
            background-color: #0a161b;
            color: #a7d4dd;
            border-radius: 8px;
            font-size: 1rem;
            transition: border-color 0.3s, box-shadow 0.3s;
        }

            .form-group input:focus {
                outline: none;
                border-color: #00b4cc;
                box-shadow: 0 0 6px #00b4ccaa;
            }

    button {
        cursor: pointer;
        font-weight: bold;
        border: none;
        border-radius: 8px;
        padding: 0.7rem 1.4rem;
        font-size: 1rem;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #1e7a87;
        color: #fff;
    }

        .btn-primary:hover {
            background-color: #249fab;
        }

    .btn-secondary {
        background-color: #39474f;
        color: #cfdfe2;
        margin-left: 0.5rem;
    }

        .btn-secondary:hover {
            background-color: #50656d;
        }

    .resultado {
        margin-top: 1.5rem;
        background-color: #0e252f;
        padding: 1.2rem;
        border-radius: 8px;
        border: 1px solid #1e7a87;
        box-shadow: inset 0 0 6px #1e7a8722;
        font-family: Consolas, monospace;
        max-height: 300px;
        overflow-y: auto;
    }

    .painel-execucao {
        display: flex;
        flex-wrap: wrap;
        gap: 1.5rem;
        margin-bottom: 1.5rem;
    }

    .bloco,
    .bloco-longo {
        background: #0e252f;
        border-radius: 10px;
        padding: 1.2rem;
        border: 1px solid #1e7a87;
        box-shadow: inset 0 0 6px #1e7a8722;
        overflow-y: auto;
    }

    .bloco {
        flex: 1 1 45%;
        max-height: 30vh;
    }

    .bloco-longo {
        flex: 1 1 100%;
        max-height: 30vh;
    }

    .linha-execucao {
        padding: 0.4rem 0.6rem;
        border-radius: 6px;
        margin-bottom: 4px;
        background: #0a161b;
        border-left: 4px solid #1e7a87;
        color: #81f1ff;
        font-size: 0.9rem;
    }

    .linha-atual {
        background-color: #143c42;
        border-left: 4px solid #00ffe0;
        font-weight: bold;
        color: #00ffe0;
    }

    .modal-container {
        background-color: #041218 !important;
        color: #a7d4dd;
        max-height: 95vh;
        overflow-y: auto;
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid #1e7a87;
        box-shadow: 0 0 20px rgba(0, 255, 234, 0.1), inset 0 0 10px rgba(30, 122, 135, 0.2);
    }


    .modal-buttons {
        text-align: right;
        margin-top: 2rem; /* aumenta o espaço acima dos botões */
    }

    .switch-label {
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-weight: bold;
        color: #81f1ff;
        margin-bottom: 1.2rem;
    }

    .switch {
        position: relative;
        display: inline-block;
        width: 50px;
        height: 26px;
    }

        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #222;
        transition: 0.4s;
        border-radius: 26px;
    }

        .slider:before {
            position: absolute;
            content: "";
            height: 20px;
            width: 20px;
            left: 3px;
            bottom: 3px;
            background-color: #a7d4dd;
            transition: 0.4s;
            border-radius: 50%;
        }

    input:checked + .slider {
        background-color: #00b4cc;
    }

        input:checked + .slider:before {
            transform: translateX(24px);
        }
</style>


